@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["AdminDashboard"];
}

<head>
    <link rel="stylesheet" href="~/css/page.css" asp-append-version="true" />
</head>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">@Localizer["AdminDashboard"]</h2>
    </div>

    <!-- البطاقات الرئيسية -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card mb-3 shadow-sm" style="background-color: #ccb296; color: #fff;">
                <div class="card-body text-center">
                    <h5 class="card-title">@Localizer["TotalStudents"]</h5>
                    <p class="card-text display-4" style="color: #7c6652;">@ViewBag.TotalStudents</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card mb-3 shadow-sm" style="background-color: #ccb296; color: #fff;">
                <div class="card-body text-center">
                    <h5 class="card-title">@Localizer["TotalEducators"]</h5>
                    <p class="card-text display-4" style="color: #7c6652;">@ViewBag.TotalEducators</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card mb-3 shadow-sm" style="background-color: #ccb296; color: #fff;">
                <div class="card-body text-center">
                    <h5 class="card-title">@Localizer["TotalUniversities"]</h5>
                    <p class="card-text display-4" style="color: #7c6652;">@ViewBag.TotalUniversities</p>
                </div>
            </div>
        </div>
    </div>

    <!-- الرسوم البيانية -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <h5 class="card-title text-center">@Localizer["QuickPerformanceAnalytics"]</h5>

            <!-- الصف الأول: رسمتين أعرض وأعلى -->
            <div class="row">
                <div class="col-md-6 mb-4">
                    <h6 class="text-center">@Localizer["ExamCompletionStats"]</h6>
                    <div id="completionChart" style="height: 300px; width: 95%; margin: auto;"></div>
                </div>
                <div class="col-md-6 mb-4">
                    <h6 class="text-center">@Localizer["UniversityRankingTitle"]</h6>
                    <div id="universityRankingChart" style="height: 300px; width: 95%; margin: auto;"></div>
                </div>
            </div>

            <!-- الصف الثاني: الرسم الثالث بعرض كامل -->
            <div class="row mt-4">
                <div class="col-12">
                    <h6 class="text-center">@Localizer["EducatorPerformanceByUniversity"]</h6>
                    <div id="educatorPerformanceChart" style="height: 400px; width: 98%; margin: auto;"></div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
<script src="https://code.highcharts.com/highcharts.js"></script>

<script>
async function loadCompletionStats() {
    const res = await fetch('@Url.Action("GetExamCompletionStats", "Admin")');
    if (!res.ok) { alert("@Localizer["FailedToLoadExamStats"]"); return; }
    const data = await res.json();
    const labels = data.map(d => d.examTitle);
    const startedData = data.map(d => d.started);
    const completedData = data.map(d => d.completed);

    Highcharts.chart('completionChart', {
        chart: { type: 'column', height: 300 },
        title: { text: '', align: 'center' },
        xAxis: { categories: labels, title: { text: '@Localizer["Exams"]' }, labels: { rotation: -45 } },
        yAxis: { min: 0, title: { text: '@Localizer["AttemptsCount"]' } },
        series: [
            { name: '@Localizer["Started"]', data: startedData, color: '#d2b48c' },
            { name: '@Localizer["Completed"]', data: completedData, color: '#8b7e74' }
        ],
        credits: { enabled: false }
    });
}

async function loadUniversityRanking() {
    const res = await fetch('@Url.Action("GetUniversityRankingStats", "Admin")');
    if (!res.ok) { alert("@Localizer["FailedToLoadUniversityStats"]"); return; }
    const data = await res.json();

    Highcharts.chart('universityRankingChart', {
        chart: { type: 'bar', height: 300 },
        title: { text: '', align: 'center' },
        xAxis: { categories: data.map(d => d.university) },
        yAxis: { min: 0, title: { text: '@Localizer["NumberOfStudents"]' } },
        series: [
            { name: '@Localizer["Passed"]', data: data.map(d => d.passed), color: '#8b7e74' },
            { name: '@Localizer["Failed"]', data: data.map(d => d.failed), color: '#b55039' }
        ],
        credits: { enabled: false }
    });
}

async function loadEducatorPerformance() {
    const res = await fetch('@Url.Action("GetEducatorPerformanceStats", "Admin")');
    if (!res.ok) { alert("@Localizer["FailedToLoadEducatorStats"]"); return; }
    const data = await res.json();
    if (!data || data.length === 0) {
        document.getElementById('educatorPerformanceChart').innerHTML =
            '<p class="text-muted text-center" style="font-size:12px;">@Localizer["NoEducatorData"]</p>';
        return;
    }

    const allUniversities = [...new Set(data.flatMap(e => e.universityStats.map(u => u.university)))];
    const series = [];

    data.forEach(educator => {
        const passedData = [], failedData = [];
        allUniversities.forEach(univ => {
            const u = educator.universityStats.find(x => x.university === univ);
            passedData.push(u ? u.passed : 0);
            failedData.push(u ? u.failed : 0);
        });

        series.push({ name: `${educator.educatorName} - @Localizer["Passed"]`, data: passedData, stack: educator.educatorName, color: '#8b7e74' });
        series.push({ name: `${educator.educatorName} - @Localizer["Failed"]`, data: failedData, stack: educator.educatorName, color: '#b55039' });
    });

    Highcharts.chart('educatorPerformanceChart', {
        chart: { type: 'column', height: 400, backgroundColor: '#fff' },
        title: { text: '', align: 'center' },
        xAxis: { categories: allUniversities, labels: { rotation: -45 } },
        yAxis: { min: 0, title: { text: '@Localizer["NumberOfStudents"]' } },
        plotOptions: { column: { stacking: 'normal' } },
        series: series,
        credits: { enabled: false }
    });
}

loadCompletionStats();
loadUniversityRanking();
loadEducatorPerformance();
</script>
}
